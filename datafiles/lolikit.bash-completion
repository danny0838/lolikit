_lolikit_bash_completion()
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    subcommand="${COMP_WORDS[1]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    prevprev="${COMP_WORDS[COMP_CWORD-2]}"

    if [[ ${prev} == loli ]] ; then
        opts="config dig find fix help list show --help --version"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
    elif [[ ${subcommand} == config ]] ; then
        opts="--user-settings --project-settings"
        COMPREPLY=( $(compgen -W "${opts}" -A command -- ${cur}) )
    elif [[ ${subcommand} == dig ]] ; then
        opts="--help"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
    elif [[ ${subcommand} == find ]] ; then
        opts="--help --path-patterns"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
    elif [[ ${subcommand} == fix ]] ; then
        opts="--help --verbose --resolve --always-yes"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
    elif [[ ${subcommand} == help ]] ; then
        opts="rules config selector --help"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
    elif [[ ${subcommand} == list ]] ; then
        opts="--help"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
    elif [[ ${subcommand} == show ]] ; then
        opts="--help"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
    else
        COMPREPLY=( $(compgen -df -- ${cur}) )
    fi
    return 0
}
complete -F _lolikit_bash_completion loli
